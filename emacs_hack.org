#+title:emacs hack record
** 优化
*** 禁止备份文件
#+begin_src elisp
  (setq make-backup-file nil)
#+end_src
*** 预加载org-mode
#+begin_src elisp
(setq org-modules-loaded t)
#+end_src

*** windows下自己编译
**** 首先安装msys2
**** 安装编译依赖
- 在 /var/cache/pacman/pkg 目录下能找到刚才下载的软件包及其依赖包
- 将软件包拷贝至不能联网的辑器上
- 执行 pacman -U mingw-w64-x86_64-jq-1.6-2-any.pkg.tar.xz 安装
  依赖如下
    #+begin_src bash
pacman -S base-devel mingw-w64-x86_64-toolchain \
mingw-w64-x86_64-xpm-nox mingw-w64-x86_64-libtiff \
mingw-w64-x86_64-giflib mingw-w64-x86_64-libpng \
mingw-w64-x86_64-libjpeg-turbo mingw-w64-x86_64-librsvg \
mingw-w64-x86_64-libxml2 mingw-w64-x86_64-gnutls
    #+end_src
**** 下载源码编译
在mingw64exe的shell下运行
修改下git
git config core.autocrlf false
git clone git://git.sv.gnu.org/emacs.git

设置然后编译
#+begin_src bash
./autogen.sh
PKG_CONFIG_PATH=/mingw64/lib/pkgconfig ./configure --host=x86_64-w64-mingw32 \
--target=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --with-wide-int \
--with-jpeg --with-xpm --with-png --with-tiff --with-rsvg --with-xml2 \
--with-gnutls --without-imagemagick
make
make install prefix=/c/emacs
#+end_src

拷贝编译时的依赖
#+begin_src 
cp /mingw64/bin/{libwinpthread-*.dll,libXpm-noX*.dll,libdbus-*.dll} /c/emacs/bin
cp /mingw64/bin/{libgomp-*.dll,libgcc_s_seh-*.dll,libglib-*.dll} /c/emacs/bin
cp /mingw64/bin/{libintl-*.dll,libiconv-*.dll,libgobject-*.dll} /c/emacs/bin
cp /mingw64/bin/{libffi-*.dll,libgdk_pixbuf-*.dll,libgio-*.dll} /c/emacs/bin
cp /mingw64/bin/{libgmodule-*.dll,zlib*.dll,librsvg-*.dll} /c/emacs/bin
cp /mingw64/bin/{libcairo-*.dll,libcroco-*.dll,libpango-*.dll} /c/emacs/bin
cp /mingw64/bin/{libpangocairo-*.dll,libxml2-*.dll,libfontconfig-*.dll} /c/emacs/bin
cp /mingw64/bin/{libfreetype-*.dll,libpixman-*.dll,libpng*.dll} /c/emacs/bin
cp /mingw64/bin/{libpangoft*.dll,libpangowin32-*.dll,liblzma-*.dll} /c/emacs/bin
cp /mingw64/bin/{libexpat-*.dll,libharfbuzz-*.dll,libgnutls-*.dll} /c/emacs/bin
cp /mingw64/bin/{libgnutlsxx-*.dll,libtiff-*.dll,libtiffxx-*.dll} /c/emacs/bin
cp /mingw64/bin/{libjpeg-*.dll,libgif-*.dll,libbz2-*.dll,libjbig-*.dll} /c/emacs/bin
cp /mingw64/bin/{libgmp-*.dll,libhogweed-*.dll,libnettle-*.dll} /c/emacs/bin
cp /mingw64/bin/{libp11-kit-*.dll,libtasn1-*.dll} /c/emacs/bin
cp /mingw64/bin/{libstdc++-*.dll,libgraphite*.dll,libbrotlidec.dll} /c/emacs/bin
cp /mingw64/bin/{libpcre-*.dll,libbrotlicommon.dll,libidn2-*.dll,libunistring-*.dll} /c/emacs/bin
#+end_src

*** dired双窗口拷贝
#+begin_src elisp
(setq dired-dwim-target 1)
#+end_src
*** 编译成elc
#+begin_src elisp
  (byte-recompile-file)
  (byte-recompile-directory)
#+end_src
** 操作方面
*** 任何代码后面执行c-x c-e
*** c-g取消一切前面的按键
*** c-x a g/l 新增一个缩写 缩写在文件~/.emacs./abbrev_defs里面
    c-q防止缩写
验证一下缩写:
验证一下缩写: 1
验证一下缩写: 2
sx 3 sx 3
** 自带插件
*** eww浏览网站
 - eww-back-url 上一个网站
   
** 安装插件
*** swiper
    #+begin_src elisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "C-h f") 'counsel-describe-function)
(global-set-key (kbd "C-h v") 'counsel-describe-variable)
    #+end_src

*** ag
# Windows 下通过 msys2 安装（确保在 path 中）
pacman -S mingw-w64-i686-ag # 32 位电脑
pacman -S mingw-w64-x86_64-ag # 64 位电脑

*** yasnappit
 里面并没有snappit需要安装yasnappit-snappits
** org-mode
*** c-c c-x b在单独buff中编辑条目
*** 关于easy templates (c-c c-,)
#+begin_src elisp
(require 'org)
(org-insert-structure-templates "s")
#+end_src
*** todo mode
**** DONE [#A] c-c c-,优先级
*** python 问题
    #+begin_src elisp
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)))
    #+end_src

    #+begin_src python
    import re
    r = re.split('\d','a2b3d4f5v')
    return r
    #+end_src

    #+RESULTS:
    | a | b | d | f | v |

    #+begin_src js
    var a = "abc"
    console.log(a);
    #+end_src

    #+RESULTS:

*** 第一次加载org慢的问题
    启动时预加载org模块
    #+begin_src elisp
(setq org-modules-loaded t)
    #+end_src

** 视觉效果
*** 全屏
#+begin_src elisp
(setq initial-frame-alist (quote ((fullscreen . maximized))))
;;(toggle-frame-fullscreen &optional FRAME)
#+end_src

*** 调整字体
#+begin_src elisp
  (text-scale-adjust);;C-x C-0
#+end_src
